package codefights

import (
	"math/rand"
	"testing"
)

func TestContainsDuplicates(t *testing.T) {
	tt := []struct {
		name   string
		a      []int
		expect bool
	}{
		{"test1", []int{1, 2, 3, 1}, true},
		{"test2", []int{3, 1}, false},
		{"test3", []int{1, 1, 1, 3, 3, 4, 3, 2, 4, 2}, true},
		{"test4", []int{}, false},
		{"test5", []int{1}, false},
		{"test6", []int{-1200000005, -1200000005}, true},
		{"test7", []int{0, 4, 5, 0, 3, 6}, true},
		{"test8", []int{1, 2, 3, 4}, false},
		{"test9", []int{0, 1, 0, -1}, true},
		{"test10", []int{2}, false},
	}
	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			res := ContainsDuplicates(tc.a)
			if res != tc.expect {
				t.Errorf("%s", "")
			}
		})
	}
}

func BenchmarkContainsDuplicates(b *testing.B) {
	for n := 0; n < b.N; n++ {
		rnd := rand.Perm(100)
		b.StartTimer()
		ContainsDuplicates(rnd)
		b.StopTimer()
	}
}

func TestSumOfTwo(t *testing.T) {
	tt := []struct {
		name   string
		a      []int
		b      []int
		v      int
		expect bool
	}{
		{"test1", []int{1, 2, 3}, []int{10, 20, 30, 40}, 42, true},
		{"test2", []int{1, 2, 3}, []int{10, 20, 30, 40}, 50, false},
		{"test3", []int{}, []int{1, 2, 3, 4}, 4, false},
		{"test4", []int{10, 1, 5, 3, 8}, []int{100, 6, 3, 1, 5}, 4, true},
		{"test5", []int{1, 4, 3, 6, 10, 1, 0, 1, 6, 5}, []int{9, 5, 6, 9, 0, 1, 2, 1, 6, 10}, 8, true},
		{"test6", []int{3, 2, 3, 7, 5, 0, 3, 0, 4, 2}, []int{6, 8, 2, 9, 7, 10, 3, 8, 6, 0}, 2, true},
		{"test7", []int{4, 6, 4, 2, 9, 6, 6, 2, 9, 2}, []int{3, 4, 5, 1, 4, 10, 9, 9, 6, 4}, 5, true},
		{"test8", []int{6, 10, 25, 13, 20, 21, 11, 10, 18, 21}, []int{21, 10, 6, 0, 29, 25, 1, 17, 19, 25}, 37, true},
		{"test9", []int{22, 26, 6, 22, 17, 11, 9, 22, 7, 12}, []int{14, 25, 22, 27, 22, 30, 6, 26, 30, 27}, 56, true},
		{"test10", []int{17, 72, 18, 72, 73, 15, 83, 90, 8, 18}, []int{100, 27, 33, 51, 2, 71, 76, 19, 16, 43}, 37, true},
		{"test11", []int{75, 38, 10, 57, 67, 39, 26, 14, 53, 80}, []int{3, 19, 28, 92, 92, 47, 98, 30, 71, 21}, 61, true},
		{"test12", []int{1, 2, 3}, []int{}, 1, false},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			res := SumOfTwo(tc.a, tc.b, tc.v)
			if res != tc.expect {
				t.Errorf("didn't find a pair like expected (%v) + (%v) >> %v",
					tc.a, tc.b, tc.v)
			}
		})
	}
}

func BenchmarkSumOfTwo(b *testing.B) {
	for n := 0; n < b.N; n++ {
		x := rand.Perm(100)
		y := rand.Perm(100)
		z := 50
		b.StartTimer()
		SumOfTwo(x, y, z)
		b.StopTimer()
	}
}

func TestSumInRange(t *testing.T) {
	tt := []struct {
		name    string
		nums    []int
		queries [][]int
		expect  int
	}{
		{"test1",
			[]int{3, 0, -2, 6, -3, 2},
			[][]int{
				{0, 2},
				{2, 5},
				{0, 5},
			},
			10,
		},
		{"test2",
			[]int{-1000},
			[][]int{
				{0, 0},
			},
			999999007,
		},
		{"test3",
			[]int{34, 19, 21, 5, 1, 10, 26, 46, 33, 10},
			[][]int{
				{3, 7},
				{3, 4},
				{3, 7},
				{4, 5},
				{0, 5},
			},
			283,
		},
		{"test4",
			[]int{-4, -18, -22, -14, -33, -47, -29, -35, -50, -19},
			[][]int{
				{2, 9},
				{5, 6},
				{1, 2},
				{2, 2},
				{4, 5},
			},
			999999540,
		},
		{"test5",
			[]int{
				-23, -8, -52, -58, 93, -16, -26, 75, -77, 25, 90, -50, -31,
				70, 53, -68, 96, 100, 69, 13,
			},
			[][]int{
				{0, 4},
				{0, 8},
				{7, 7},
				{3, 4},
				{2, 3},
				{0, 3},
				{8, 8},
				{2, 2},
				{5, 7},
				{2, 2},
			},
			999999578,
		},
		{"test6",
			[]int{-77, 54, -59, -94, -13, -78, -81, -38, -26, 17, -73, -88, 90,
				-42, -63, -36, 37, 25, -22, 4, 25, -86, -44, 88, 2, -47, -29,
				71, 54, -42},
			[][]int{
				{2, 2},
				{4, 7},
				{2, 4},
				{0, 2},
				{3, 6},
				{6, 6},
				{3, 3},
				{2, 7},
				{3, 4},
				{3, 3},
				{2, 9},
				{0, 1},
				{4, 4},
				{2, 3},
				{0, 6},
				{4, 4},
				{2, 3},
				{0, 5},
				{2, 5},
				{4, 5},
			},
			999996808,
		},
		{"test7",
			[]int{
				1000,
			},
			[][]int{
				{0, 0},
			},
			1000,
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			res := SumInRange(tc.nums, tc.queries)
			if res != tc.expect {
				t.Errorf("Want: %v, Got: %v", tc.expect, res)
			}
		})
	}
}

func BenchmarkSumInRange(b *testing.B) {
	var queries [10][]int
	for n := 0; n < b.N; n++ {
		nums := rand.Perm(100)
		for i := 0; i < 10; i++ {
			queries[i] = rand.Perm(2)
			// queries = append(queries, append(queries[i], rand.Perm(2)...))
		}
		b.StartTimer()
		SumInRange(nums, queries[:])
		b.StopTimer()
	}
}

func TestArrayMaxConsecutiveSum2(t *testing.T) {
	tt := []struct {
		name   string
		input  []int
		expect int
	}{
		{"test1", []int{-2, 2, 5, -11, 6}, 7},
		{"test2", []int{-3, -2, -1, -4}, -1},
		{"test3", []int{-3, 2, 1, -4}, 3},
		{"test4", []int{1, -2, 3, -4, 5, -3, 2, 2, 2}, 8},
		{"test5", []int{11, -2, 1, -4, 5, -3, 2, 2, 2}, 14},
		{"test6", []int{89, 96, 60, 10, 24, 30, 72, 40, 74, 49, 38, 87, 55, 46,
			44, 14, 49, 88, 93, 11,
		},
			1069,
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			res := ArrayMaxConsecutiveSum2(tc.input)
			if res != tc.expect {
				t.Errorf("maximum consecutive sum of (%v) is not %v as expected",
					tc.input, tc.expect)
			}
		})
	}
}

func BenchmarkArrayMaxConsecutiveSum2(b *testing.B) {
	for n := 0; n < b.N; n++ {
		input := rand.Perm(5)
		b.StartTimer()
		ArrayMaxConsecutiveSum2(input)
		b.StopTimer()
	}
}

func TestFindLongestSubarrayBySum(t *testing.T) {
	tt := []struct {
		name   string
		arr    []int
		s      int
		expect []int
	}{
		{"test1", []int{1, 2, 3, 7, 5}, 12, []int{2, 4}},
		{"test2", []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 15, []int{1, 5}},
		{"test3", []int{1, 2, 3, 4, 5, 0, 0, 0, 6, 7, 8, 9, 10}, 15, []int{1, 8}},
		{"test4", []int{0, 3, 0}, 3, []int{1, 3}},
		{"test5", []int{3}, 3, []int{1, 1}},
		{"test6", []int{2}, 3, []int{-1}},
		{"test7", []int{
			135, 101, 170, 125, 79, 159, 163, 65, 106, 146, 82, 28, 162, 92,
			196, 143, 28, 37, 192, 5, 103, 154, 93, 183, 22, 117, 119, 96,
			48, 127, 0, 172, 0, 139, 0, 0, 70, 113, 68, 100, 36, 95, 104, 12,
			123, 134,
		},
			468,
			[]int{
				42, 46,
			},
		},
		{"test8", []int{
			142, 112, 54, 69, 148, 45, 63, 158, 38, 60, 124, 142, 130, 179, 117,
			36, 191, 43, 89, 107, 41, 143, 65, 49, 47, 6, 91, 130, 171, 151, 7,
			102, 194, 149, 30, 24, 85, 155, 157, 41, 167, 177, 132, 109, 145,
			40, 27, 124, 138, 139, 119, 83, 130, 142, 34, 116, 40, 59, 105, 131,
			178, 107, 74, 187, 22, 146, 125, 73, 71, 30, 178, 174, 98, 113,
		},
			3,
			[]int{-1},
		},
		{"test9", []int{
			162, 37, 156, 168, 56, 175, 32, 53, 151, 151, 142, 125, 167, 31,
			108, 192, 8, 138, 58, 88, 154, 184, 146, 110, 10, 159, 22, 189, 23,
			147, 107, 31, 14, 169, 101, 192, 163, 56, 11, 160, 25, 138, 149, 84,
			196, 42, 3, 151, 92, 37, 175, 21, 197, 22, 149, 200, 69, 85, 82,
			135, 54, 200, 19, 139, 101, 189, 128, 68, 129, 94, 49, 84, 8, 22,
			111, 18, 14, 115, 110, 17, 136, 52, 1, 50, 120, 157, 199,
		},
			1291,
			[]int{-1},
		},
		{"test10", []int{9, 45, 10, 190}, 225, []int{-1}},
		{"test11", []int{86, 94, 144}, 1196, []int{-1}},
		{"test12", []int{1, 0, 2}, 0, []int{2, 2}},
		{"test13", []int{
			115, 104, 49, 1, 59, 19, 181, 197, 199, 82, 190, 199, 10, 158, 73,
			23, 139, 93, 39, 180, 191, 58, 159, 192,
		},
			1588,
			[]int{-1},
		},
		{"test14", []int{
			157, 112, 3, 35, 73, 56, 129, 47, 163, 87, 76, 34, 70, 143, 45, 17},
			889,
			[]int{-1},
		},
		{"test15",
			[]int{
				123, 52, 22, 100, 158, 77, 93, 190, 76, 113, 1, 111, 4, 70, 62,
				89, 2, 190, 56, 24, 3, 186, 183, 86, 89, 27, 18, 158, 33, 133,
				170, 155, 122, 190, 177, 130, 169, 93, 26, 156, 35, 150, 42,
				113, 146, 61, 119, 154, 140, 24, 80, 197, 88, 130, 150, 38, 67,
				150, 194, 196, 98, 17, 87, 106, 89, 83, 56, 135, 115, 102, 117,
				72, 187, 64, 114, 156, 186, 54, 113, 9, 33, 146,
			},
			1999,
			[]int{-1},
		},
		{"test16", []int{
			122, 159, 47, 183, 82, 145, 197, 23, 130, 162, 136, 51, 174, 67,
		},
			1757,
			[]int{-1},
		},
		{"test17",
			[]int{
				26, 144, 0, 0, 125, 24, 0, 0, 0, 0, 173, 0, 0, 0, 62, 182, 4,
				33, 106, 194, 126, 32, 93, 143, 23, 87, 65, 0, 0, 0, 0, 0, 0, 0,
				0, 101, 188, 161, 14, 175, 71, 171, 36, 34, 112, 161, 97, 68,
				86, 151, 141, 95, 96, 25, 20, 126, 177, 95, 59, 103, 172, 67,
				79, 194, 52, 85, 19, 65, 120, 153, 1, 88, 61, 127, 11, 158, 171,
				116, 177, 28, 44, 159, 165, 110, 83, 87, 166, 88, 178, 75, 26,
				28, 30, 129, 24, 121, 103, 163, 124, 197, 138, 62, 196, 126, 65,
				61, 3, 117, 31, 127, 12, 172, 12, 148, 154, 0, 0, 0, 0, 0, 121,
				191,
			},
			528,
			[]int{2, 15},
		},
		{"test18", []int{
			164, 141, 52, 63, 30, 101, 114, 159, 179, 166, 8, 78, 1, 59, 40,
			104, 161, 158, 125, 78, 109, 114, 88, 2, 51,
		},
			189,
			[]int{-1},
		},
		{"test19", []int{194, 185, 6, 141, 112, 105, 36, 157, 73, 151, 24, 86,
			157, 17, 27, 158, 127, 158, 138, 72, 70, 162, 97, 23, 18, 113, 118,
			97, 186, 42, 24, 130, 30, 166, 160, 133, 97, 56, 54, 163, 185, 135,
			55, 173, 58, 170, 133, 164, 8, 84, 112, 36, 68, 49, 76, 139, 24,
			143, 155, 112, 142,
		},
			429,
			[]int{-1},
		},
		{"test20",
			[]int{
				28, 68, 142, 130, 41, 14, 175, 2, 78, 16, 84, 14, 193, 25, 2,
				193, 160, 71, 29, 28, 85, 76, 187, 99, 171, 88, 48, 5, 104, 22,
				64, 107, 164, 11, 172, 90, 41, 165, 143, 20, 114, 192, 105, 19,
				33, 151, 6, 176, 140, 104, 23, 99, 48, 185, 49, 172, 65,
			},
			1562,
			[]int{20, 37},
		},
		{"test21", []int{
			146, 113, 147, 79, 170, 63, 120, 186, 90, 145, 66, 141, 46, 109,
		},
			1076,
			[]int{-1},
		},
		{"test22", []int{
			2, 124, 133, 73, 153, 88, 171, 164, 102, 104, 24, 128, 1, 170, 16,
			166, 29, 144, 148,
		},
			1871,
			[]int{-1},
		},
		{"test23", []int{
			38, 10, 64, 50, 82, 189, 143, 9, 61, 22, 159, 155, 89, 147, 91, 150,
			44, 31, 21, 149, 68, 137, 184, 36, 27, 186, 39, 54, 30, 25, 149,
			124, 160, 58, 167, 145, 156, 119, 127, 12, 26, 156, 2, 150, 97, 185,
			116, 165, 143, 76, 114, 143, 197, 149, 73, 27, 7, 174, 30, 5, 106,
			27, 13, 176, 94, 166, 37, 137, 142, 15, 195, 57, 53, 137, 39, 83,
			156, 16, 132, 31, 42, 26, 12, 38, 187, 91, 51, 63, 35,
		},
			944,
			[]int{2, 12},
		},
		{"test24", []int{
			17, 53, 9, 63, 34, 55, 104, 35, 104, 57, 149, 125, 118, 14, 110, 29,
			1, 81, 119, 59, 51, 156, 162, 65, 104, 77, 44, 110, 103, 162, 90,
			149, 83, 54, 75, 21, 3, 124, 32, 170, 79, 60, 9, 20, 172, 4, 146,
			182, 105, 193, 86, 114, 99, 190, 123, 139, 38, 11, 62, 35, 109, 162,
			160, 94, 116, 70, 138, 70, 59, 101, 172, 65, 118, 16, 156, 16, 131,
			40, 13, 89, 83, 155, 86, 111, 85, 175, 181, 16, 152, 142, 116, 80,
			111, 99,
		},
			354,
			[]int{14, 19},
		},
		{"test25", []int{
			178, 133, 157, 90, 114, 9, 142, 191, 124, 164, 29, 185, 179, 1, 72,
			86, 175, 72, 134, 68, 154, 96, 169, 26, 77, 30, 51, 199, 110, 94,
			87, 81, 117, 50, 68, 129, 80, 65, 22, 6, 27, 17, 117, 127, 67, 88,
			82, 165, 141, 87, 22, 63, 122, 65, 110, 16, 103, 74, 125, 142, 146,
			163, 24, 132, 7, 69, 119, 3, 108, 108, 82, 13, 137, 31,
		},
			789,
			[]int{27, 34},
		},
		{"test26", []int{
			85, 157, 91, 94, 197, 153, 55, 146, 109, 49, 92, 113, 132, 115, 40,
		},
			810,
			[]int{-1},
		},
		{"test27", []int{
			105, 196, 53, 70, 80, 39, 24, 119, 67, 60, 99, 87, 197, 63, 34, 159,
			23, 147, 193, 38, 126, 48, 59, 3, 8, 99, 31, 93, 1, 79, 200, 153,
			49, 83, 141, 116, 176, 163, 168, 137, 198, 19, 98, 29, 52, 17, 31,
			50, 126, 59, 30, 121, 141, 161, 148, 163, 56, 76, 193,
		},
			723,
			[]int{-1},
		},
		{"test28",
			[]int{
				199, 147, 115, 147, 189, 170, 39, 64, 76, 116, 122, 76, 16, 129,
				35, 171, 106, 65, 158, 163, 162, 125, 150, 70, 131, 124, 151,
				134, 126, 111, 138, 137, 138, 79, 194, 37, 115, 165, 192, 150,
				136, 106, 138, 5, 138, 24, 65, 171, 9, 169, 82, 86, 153, 174,
				53, 195, 77, 27, 197, 173, 50, 41,
			},
			3,
			[]int{-1},
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			res := FindLongestSubarrayBySum(tc.s, tc.arr)
			if len(res) != len(tc.expect) {
				t.Errorf("Want: %v, Got: %v", tc.expect, res)
			}
			for i := range res {
				if res[i] != tc.expect[i] {
					t.Errorf("Want: %v, Got: %v", tc.expect, res)
				}
			}
		})
	}
}

func BenchmarkFindLongestSubarrayBySum(b *testing.B) {
	for n := 0; n < b.N; n++ {
		sum := rand.Int()
		arr := rand.Perm(10)
		b.StartTimer()
		FindLongestSubarrayBySum(sum, arr)
		b.StopTimer()
	}
}

// func TestProductExceptSelf(t *testing.T) {
//	tt := []struct {
//		name   string
//		nums   []int
//		m      int
//		expect int
//	}{
//		{"test1", []int{1, 2, 3, 4}, 12, 2},
//		{"test2", []int{2, 100}, 24, 6},
//		{"test3", []int{5, 8, 6, 3, 2}, 8, 4},
//		{"test4", []int{3, 3, 9, 5, 5, 4, 2, 8, 5, 9}, 17, 16},
//		{"test5", []int{
//			27, 37, 47, 30, 17, 6, 20, 17, 21, 43, 5, 49, 49, 50, 20, 42, 45,
//			1, 22, 44,
//		},
//			12,
//			2,
//		},
//		{"test6", []int{28, 27, 11, 17, 19, 49, 19, 46, 41, 21, 1, 49, 18, 26,
//			16, 24, 16, 36, 19, 49, 31, 39, 11, 21, 29, 37, 34, 34, 6, 16, 26,
//			31, 6, 48, 38, 36, 26, 36, 38, 18,
//		},
//			5040,
//			0,
//		},
//		{"test7", []int{52, 40, 2, 78, 49, 70, 39, 26, 58, 58, 52, 93, 80, 64,
//			33, 72, 29, 17, 81, 83, 48, 9, 49, 82, 67, 76, 54, 64, 6, 48, 16,
//			82, 67, 56, 32, 98, 14, 47, 48, 26, 56, 54, 80, 13, 32, 18, 4, 73,
//			45, 65,
//		},
//			530,
//			220,
//		},
//		{"test8", []int{37, 50, 50, 6, 8, 54, 7, 64, 2, 64, 67, 59, 22, 73, 33,
//			53, 43, 77, 56, 76, 59, 96, 64, 100, 89, 38, 64, 73, 85, 96, 65, 50,
//			62, 4, 82, 57, 98, 61, 92, 55, 80, 53, 80, 55, 94, 9, 73, 89, 83,
//			80,
//		},
//			67,
//			55,
//		},
//	}

//	for _, tc := range tt {
//		t.Run(tc.name, func(t *testing.T) {
//			res := ProductExceptSelf(tc.nums, tc.m)
//			if res != tc.expect {
//				t.Errorf("Want: %v, Got: %v", tc.expect, res)
//			}
//		})
//	}
// }

// func TestMinSubstringWithAllChars(t *testing.T) {
//	tt := []struct {
//		name   string
//		s      string
//		t      string
//		expect string
//	}{
//		{"test1", "adobecodebanc", "abc", "banc"},
//		{"test2", "", "", ""},
//		{"test3", "abz", "abz", "abz"},
//		{"test4", "zqyvbfeiee", "ze", "zqyvbfe"},
//		{"test5", "tvdsxcqsnoeccaurocnk", "acpt", "tvdsxcqsnoecca"},
//		{"test6", "xgajymplpvftjwjqomhbnutorgysaf", "j", "j"},
//	}

//	for _, tc := range tt {
//		t.Run(tc.name, func(t *testing.T) {
//			res := MinSubstringWithAllChars(tc.s, tc.t)
//			if res != tc.expect {
//				t.Errorf("Want: %v, Got: %v", tc.expect, res)
//			}
//		})
//	}
// }
